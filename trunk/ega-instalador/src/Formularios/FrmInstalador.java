/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.util.Properties;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Nicolas
 */
public class FrmInstalador extends javax.swing.JFrame {
    /**
     * Creates new form FrmInstalador
     */
    public FrmInstalador() {
        initComponents();
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }

    private Properties Propiedades = java.lang.System.getProperties();
    private String PATH_INSTALACION = "C:\\EGA";
    private String VERSION_REQUERIDA_JAVA = "1.7";
    private String USER_DIR = Propiedades.getProperty("user.dir");
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblVersionJava = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        chkJava = new javax.swing.JCheckBox();
        lblNombre2 = new javax.swing.JLabel();
        lblInstalarJava = new javax.swing.JLabel();
        lblMensajeJava = new javax.swing.JLabel();
        lblSistema = new javax.swing.JLabel();
        btnDesinstalar = new javax.swing.JButton();
        btnInstalar = new javax.swing.JButton();
        lblImagenFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setMinimumSize(new java.awt.Dimension(530, 300));
        setName("frmSplash"); // NOI18N
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblVersionJava.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        lblVersionJava.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(lblVersionJava, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 126, 110, 22));

        jLabel2.setFont(new java.awt.Font("SansSerif", 3, 23)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Easy Genetic Algorithms");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 44, 284, 32));

        jLabel3.setFont(new java.awt.Font("SansSerif", 3, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Bienvenido al Instalador de");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 10, 320, 34));

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 258, -1, -1));

        chkJava.setBackground(new java.awt.Color(0, 153, 153));
        chkJava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkJavaActionPerformed(evt);
            }
        });
        getContentPane().add(chkJava, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 224, -1, -1));

        lblNombre2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblNombre2.setForeground(new java.awt.Color(255, 255, 255));
        lblNombre2.setText("Detectando su equipo...");
        getContentPane().add(lblNombre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 82, 230, 26));

        lblInstalarJava.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblInstalarJava.setForeground(new java.awt.Color(255, 255, 255));
        lblInstalarJava.setText("Actualizar Java ahora.");
        getContentPane().add(lblInstalarJava, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 222, 126, 26));

        lblMensajeJava.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblMensajeJava.setForeground(new java.awt.Color(255, 255, 255));
        lblMensajeJava.setText("<html>EGA requiere la versión<p>de Java </html>");
        getContentPane().add(lblMensajeJava, new org.netbeans.lib.awtextra.AbsoluteConstraints(374, 178, 156, 38));

        lblSistema.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        lblSistema.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(lblSistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 110, 156, 22));

        btnDesinstalar.setText("Desinstalar");
        btnDesinstalar.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnDesinstalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesinstalarActionPerformed(evt);
            }
        });
        getContentPane().add(btnDesinstalar, new org.netbeans.lib.awtextra.AbsoluteConstraints(266, 258, -1, -1));

        btnInstalar.setText("Instalar");
        btnInstalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInstalarActionPerformed(evt);
            }
        });
        getContentPane().add(btnInstalar, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 258, -1, -1));

        lblImagenFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system/res/instalador.png"))); // NOI18N
        lblImagenFondo.setText("jLabel1");
        getContentPane().add(lblImagenFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 532, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkJavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkJavaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkJavaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        
        int rta = JOptionPane.showConfirmDialog(this, "<html>¿Desea cancelar la instalación de EGA?</html>", "EGA - Instalación", JOptionPane.YES_NO_OPTION);
        if (rta == JOptionPane.YES_OPTION) 
        {
            System.exit(0);
        }
        
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnDesinstalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesinstalarActionPerformed

        int rta = JOptionPane.showConfirmDialog(this, "<html>¿Confirma desinstalar EGA de su equipo?</html>", "EGA - Desinstalar", JOptionPane.YES_NO_OPTION);
        if (rta == JOptionPane.YES_OPTION) 
        {
            File destino = new File (PATH_INSTALACION);
            File EGAlnk =  null;
            String Escritorio = this.BuscarEscritorio();
            if (Escritorio != null)
            {
                Escritorio = Escritorio + "\\EGA.lnk";
                EGAlnk = new File (Escritorio);
            }
            
            if (ExisteInstalacion() == true)
            {
                try {
                    FileUtils.deleteDirectory(destino);
                    FileUtils.deleteQuietly(EGAlnk);
                    JOptionPane.showConfirmDialog(this, "<html>EGA se ha desinstalado correctamente.</html>", "EGA - Desinstalar", JOptionPane.CLOSED_OPTION,JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showConfirmDialog(this, "<html>Se produjo un error desinstalando EGA</html>", "EGA", JOptionPane.CLOSED_OPTION,JOptionPane.ERROR_MESSAGE);
                    //Logger.getLogger(FrmInstalador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                JOptionPane.showConfirmDialog(this, "<html>No se ha encontrado ninguna instalación previa de EGA.</html>", "EGA - Desinstalar", JOptionPane.CLOSED_OPTION,JOptionPane.INFORMATION_MESSAGE);        
            }
        }
        
    }//GEN-LAST:event_btnDesinstalarActionPerformed

    private void btnInstalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInstalarActionPerformed

        int iEstado = 0;
        Process JREProc = null;            
        String sJREPath = USER_DIR + "\\JRE\\Windows";
        String sArquitectura = Propiedades.getProperty("os.arch");

        
        if (this.chkJava.isSelected() == true) //si eligió instalar Java
        {
            if ("x86".equals(sArquitectura))
            {
                sJREPath = sJREPath + "\\32bits\\jre-7u9-windows-32bits.exe";
            }
            else
            {
                sJREPath = sJREPath + "\\64bits\\jre-7u9-win7-64bits.exe";
            }
            ProcessBuilder builder = new ProcessBuilder(new String[] { "cmd.exe", "/C", sJREPath });                
            try {
                JREProc = builder.start();
            } catch (IOException ex) {
                JOptionPane.showConfirmDialog(this, "<html>Se produjo un error iniciando la instalación de Java:<p>" + ex.getMessage() + "<p><p>Se ha cancelado la instalación.</html>", "EGA",  JOptionPane.CLOSED_OPTION, JOptionPane.PLAIN_MESSAGE );
                //Logger.getLogger(FrmInstalador.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setVisible(false);
            try {
                iEstado = JREProc.waitFor();
            } catch (InterruptedException ex) {
                JOptionPane.showConfirmDialog(this, "<html>Se produjo un error finalizando la instalación de Java:<p>" + ex.getMessage() + "<p><p>Se ha cancelado la instalación.</html>", "EGA",  JOptionPane.CLOSED_OPTION, JOptionPane.PLAIN_MESSAGE);
                //Logger.getLogger(FrmInstalador.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.setVisible(true);
            if (iEstado != 0)
            {
                //informo que la instalacion de java terminó mal
                //y pregunto si igualmente quiere continuar la instalacion de EGA o no.
                int rta = JOptionPane.showConfirmDialog(this, "<html>La instalación de Java finalizó con errores o ha sido cancelada.<p><p>¿Desea igualmente iniciar la instalación de EGA?<p><p></html>", "EGA - INSTALADOR", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (rta == JOptionPane.NO_OPTION) 
                {
                    JOptionPane.showConfirmDialog(this, "<html>Instalación cancelada.</html>", "EGA",  JOptionPane.CLOSED_OPTION, JOptionPane.PLAIN_MESSAGE);
                    System.exit(0);
                }
            }
            this.InstalarEGA();
        }
        else //instalación de EGA
        {
            this.InstalarEGA();
        }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInstalarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmInstalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmInstalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmInstalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmInstalador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmInstalador().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnDesinstalar;
    private javax.swing.JButton btnInstalar;
    private javax.swing.JCheckBox chkJava;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblImagenFondo;
    private javax.swing.JLabel lblInstalarJava;
    private javax.swing.JLabel lblMensajeJava;
    private javax.swing.JLabel lblNombre2;
    private javax.swing.JLabel lblSistema;
    private javax.swing.JLabel lblVersionJava;
    // End of variables declaration//GEN-END:variables


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
    
    public void MostrarDesinstalar (boolean mostrar)
    {
        this.btnDesinstalar.setVisible(mostrar);
    }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
    
    public void DetectarEquipo()
    {
    

        String sVersion = Propiedades.getProperty("java.version");
        sVersion = sVersion.substring(0, 3);
        Float f = Float.valueOf(sVersion);
        String OSName = Propiedades.getProperty("os.name");
        
        
        this.lblSistema.setText("Sistema: " + OSName);
        this.lblVersionJava.setText("Versión Java: " + f.toString());
        
        if (f.floatValue() < Float.valueOf(VERSION_REQUERIDA_JAVA))
        {
            this.lblMensajeJava.setText("<html>EGA requiere la versión<p>de Java " + VERSION_REQUERIDA_JAVA + " o superior.</html>");
            this.lblMensajeJava.setVisible(true);
            this.lblInstalarJava.setVisible(true);
            this.chkJava.setVisible(true);
        }
        else
        {
            this.lblMensajeJava.setVisible(false);
            this.lblInstalarJava.setVisible(false);
            this.chkJava.setVisible(false);
        }
        
        if ("Win".equals(OSName.substring(0, 3)) == false)
        {
            JOptionPane.showConfirmDialog(this, "<html>Este instalador sólo es compatible con plataformas Windows.<p><p>Si desea instalar EGA en un sistema operativo diferente, deberá primero instalar manualmente <p>la versión de Java adecuada para su sistema operativo. La puede encontar en la carpeta JRE <p>del CD de instalación de EGA. Luego copie la carpeta EGA a una carpeta de su equipo.<p><p>Para mayor información, consulte el Manual de Instalacion.</html>", "EGA - Instalador",  JOptionPane.PLAIN_MESSAGE, JOptionPane.CLOSED_OPTION);
            System.exit(0);
        }
        
    }
    
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
    
    public boolean ExisteInstalacion()
    {
        File file = new File(PATH_INSTALACION);
        boolean existe = file.exists();

        return existe;
    }
    
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

    private void InstalarEGA() 
    {
            File origen = new File (USER_DIR + "\\EGA");
            File destino = new File ("C:\\");
            
            if ( this.ExisteInstalacion() == true )
            {
                int rta = JOptionPane.showConfirmDialog(this, "<html>EGA ya está actualmente instalado en su equipo.<p>Se recomienda que cancele esta instalación y haga un back-up de EGA.<p><p>¿Desea continuar con la instalación actual?<p><p>(Sólo se sobreescribiran los archivos de EGA, conservando sus archivos personales).</html>", "EGA - Instalación.", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if ( rta == JOptionPane.NO_OPTION ) 
                {
                    return;
                }
            }

            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            try {
                FileUtils.copyDirectoryToDirectory(origen, destino);
            } catch (IOException ex) {
                JOptionPane.showConfirmDialog(this, "<html>Se produjo un error copiando los archivos de EGA:<p>" + ex.getMessage() + "<p><p>Se ha cancelado la instalación.</html>", "EGA",  JOptionPane.CLOSED_OPTION, JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(FrmInstalador.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.CrearAccesoDirecto();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));            
            JOptionPane.showConfirmDialog(this, "<html>La instalación ha finalizado con éxito.<p>Ya puede comenzar a utilizar EGA!</html>", "EGA - Instalación Finalizada.",  JOptionPane.CLOSED_OPTION, JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
    }
    
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
    
    private void CrearAccesoDirecto() 
    {
        Process SCRIPTProc = null;
        //String strLNK = PATH_INSTALACION + "\\system\\res\\EGA.lnk";
        String strEscritorio = this.BuscarEscritorio();
        
        
        if (strEscritorio != null)
        {
            File viejoLNK = new File (strEscritorio + "\\EGA.lnk");
            if ( viejoLNK.exists() == true )
            {
                FileUtils.deleteQuietly(viejoLNK);
            }    
            /*
            File LNK = new File(strLNK);
            File Escritorio = new File(strEscritorio);    
            try {
                FileUtils.copyFileToDirectory(LNK, Escritorio);
            } catch (IOException ex) {
                JOptionPane.showConfirmDialog(this, "<html>Se produjo un error creando el acceso directo a EGA.<p>" + ex.getMessage() + "</html>", "EGA",  JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);    
                //Logger.getLogger(FrmInstalador.class.getName()).log(Level.SEVERE, null, ex);
            }
            */
        }

        try 
        {
            String ScriptLNK = "cscript \"" + USER_DIR + "\\scripts\\EGA.vbs\" \"EGA\" \"" + PATH_INSTALACION + "\\EGA.jar\"";
            SCRIPTProc = Runtime.getRuntime().exec(ScriptLNK);
        } catch (IOException ex)
        {
            JOptionPane.showConfirmDialog(this, "<html>Se produjo un error modificando el acceso directo a EGA.<p>" + ex.getMessage() + "</html>", "EGA",  JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);    
            //Logger.getLogger(FrmInstalador.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try 
        {
            SCRIPTProc.waitFor();
        }
        catch (InterruptedException ex) 
        {
            JOptionPane.showConfirmDialog(this, "<html>Error en espera de proceso.<p>" + ex.getMessage() +  "</html>", "EGA",  JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);    
            //Logger.getLogger(FrmInstalador.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
    
    private String BuscarEscritorio()
    {
        String Escritorio = System.getProperty("user.home") + "\\Desktop";
        File aux = new File (Escritorio);
        if (aux.exists()==false)
        {
            Escritorio = System.getProperty("user.home") + "\\Escritorio";
            aux = new File (Escritorio);
            if (aux.exists()==false)
            {
                Escritorio = null;
                aux = null;
            }
        }
        
        return Escritorio;
    }

} // FIN public class FrmInstalador
